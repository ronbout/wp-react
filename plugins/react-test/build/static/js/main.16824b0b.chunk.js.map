{"version":3,"sources":["components/testStateRender/TestRenderDisplay.js","components/testStateRender/TestHooksRender.js","App.js","serviceWorker.js","index.js"],"names":["TestRenderDisplay","userInfo","className","map","user","ndx","key","name","age","objCopy","obj","JSON","parse","stringify","userInfoDefault","TestHooksRender","props","useState","setUserInfo","user2","setUser2","style","padding","type","onClick","tmpUser","App","Boolean","window","location","hostname","match","target","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAmBeA,EAjBW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC5B,OACC,yBAAKC,UAAU,gBACd,yCACCD,GACAA,EAASE,IAAI,SAACC,EAAMC,GACnB,OACC,yBAAKH,UAAU,YAAYI,IAAKD,GAC/B,yCAAeD,EAAKG,MACpB,wCAAcH,EAAKI,UCRbC,EAAU,SAAAC,GAAG,OAAIC,KAAKC,MAAMD,KAAKE,UAAUH,KAElDI,EAAkB,CACvB,CACCP,KAAM,iBACNC,IAAK,IAEN,CACCD,KAAM,aACNC,IAAK,KA+CQO,EA3CS,SAAAC,GAAU,IAAD,EACAC,mBAASH,GADT,mBACzBb,EADyB,KACfiB,EADe,OAEND,mBAASR,EAAQK,IAFX,mBAEzBK,EAFyB,KAElBC,EAFkB,KAyBhC,OACC,6BACC,yBAAKC,MAAO,CAAEC,QAAS,SACtB,kBAAC,EAAD,CAAmBrB,SAAUA,IAC7B,4BAAQsB,KAAK,SAASC,QAzBN,WAIlB,IAAMC,EAAUxB,EAGhBwB,EAAQ,GAAGlB,KAAO,gBAIlBW,EAAYO,KAcV,gBAID,yBAAKJ,MAAO,CAAEC,QAAS,SACtB,kBAAC,EAAD,CAAmBrB,SAAUkB,IAC7B,4BAAQI,KAAK,SAASC,QAjBL,WAEnB,IAAMC,EAAUhB,EAAQU,GACxBM,EAAQ,GAAGlB,KAAO,WAClBa,EAASK,KAaP,oBC0DWC,EA3DH,WACX,OAAO,kBAAC,EAAD,OCvCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAASC,SAASC,eAAe,eACnCF,GAAQG,IAASC,OAAO,kBAAC,EAAD,MAASJ,GD0H/B,kBAAmBK,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.16824b0b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst TestRenderDisplay = ({ userInfo }) => {\r\n\treturn (\r\n\t\t<div className=\"display-user\">\r\n\t\t\t<h2>User Info</h2>\r\n\t\t\t{userInfo &&\r\n\t\t\t\tuserInfo.map((user, ndx) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div className=\"user-info\" key={ndx}>\r\n\t\t\t\t\t\t\t<p>User name: {user.name}</p>\r\n\t\t\t\t\t\t\t<p>User age: {user.age}</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TestRenderDisplay;\r\n","import React, { useState } from \"react\";\r\nimport TestRenderDisplay from \"./TestRenderDisplay\";\r\n\r\nexport const objCopy = obj => JSON.parse(JSON.stringify(obj));\r\n\r\nconst userInfoDefault = [\r\n\t{\r\n\t\tname: \"Fred Flinstone\",\r\n\t\tage: 35\r\n\t},\r\n\t{\r\n\t\tname: \"Clark Kent\",\r\n\t\tage: 52\r\n\t}\r\n];\r\n\r\nconst TestHooksRender = props => {\r\n\tconst [userInfo, setUserInfo] = useState(userInfoDefault);\r\n\tconst [user2, setUser2] = useState(objCopy(userInfoDefault));\r\n\r\n\tconst updateUser = () => {\r\n\t\t// the following only makes a shallow copy of the array\r\n\t\t// so, yes, it is a new array.  But, the objects it is\r\n\t\t// pointing to are the same\r\n\t\tconst tmpUser = userInfo;\r\n\t\t// setting tmpUser actually changes the state variable w/o\r\n\t\t// running it through the setState hook, thus no re-render\r\n\t\ttmpUser[0].name = \"Barney Rubble\";\r\n\t\t// setUserInfo will NOT trigger a re-render since it does not\r\n\t\t// think that the state was updated as it compares\r\n\t\t// Barney Rubble to Barney Rubble\r\n\t\tsetUserInfo(tmpUser);\r\n\t};\r\n\r\n\tconst updateUser2 = () => {\r\n\t\t// the following only makes a deep copy of the array\r\n\t\tconst tmpUser = objCopy(user2);\r\n\t\ttmpUser[1].name = \"Superman\";\r\n\t\tsetUser2(tmpUser);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div style={{ padding: \"1rem\" }}>\r\n\t\t\t\t<TestRenderDisplay userInfo={userInfo} />\r\n\t\t\t\t<button type=\"button\" onClick={updateUser}>\r\n\t\t\t\t\tUpdate User\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<div style={{ padding: \"1rem\" }}>\r\n\t\t\t\t<TestRenderDisplay userInfo={user2} />\r\n\t\t\t\t<button type=\"button\" onClick={updateUser2}>\r\n\t\t\t\t\tUpdate User 2\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TestHooksRender;\r\n","import React from \"react\";\nimport \"./App.css\";\n\n/* import ExpansionDiv from \"./components/testExpansion/ExpansionDiv\";\nconst App = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<ExpansionDiv />\n\t\t</div>\n\t);\n}; */\n\n/*\n// test all-purpose setForm hooks for setting up standard forms\nimport RegisterFormContainer from \"./components/testFormHook/RegisterFormContainer\";\nconst App = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<RegisterFormContainer />\n\t\t</div>\n\t);\n};\n*/\n\n/*\n// test create a hoc for checking dirty forms and displaying a warning\nimport UserFormContainer from \"./components/testDirtyForm/UserFormContainer2\";\nconst App = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<UserFormContainer />\n\t\t</div>\n\t);\n};\n*/\n\n/*\n// test a User Modal Message for important user input\nimport TestUserModalMsg from \"./components/testUserModalMsg/TestUserModalMsg\";\nconst App = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<TestUserModalMsg />\n\t\t</div>\n\t);\n};\n*/\n\n// Test bugs with directly mutating state by not making a deep copy\nimport TestHooksRender from \"./components/testStateRender/TestHooksRender\";\nconst App = () => {\n\treturn <TestHooksRender />;\n};\n\n/*\n// Test dismissible, user message popup, using MakePopup\nimport Message from \"./components/testUserMsg/UserMsg\";\n\nfunction App() {\n  const [dispMsg, setDispMsg] = React.useState(true);\n\n  return (\n    <div className=\"App\">\n      <div className=\"msg-container\">\n        {dispMsg && (\n          <Message\n            msg=\"howdy\"\n            msgHeader=\"Urgent!\"\n            msgType=\"warning\"\n            handleClose={() =>\n              setDispMsg(prevSetting => {\n                return !prevSetting;\n              })\n            }\n          />\n        )}\n      </div>\n      <button\n        type=\"button\"\n        onClick={() =>\n          setDispMsg(prevSetting => {\n            return !prevSetting;\n          })\n        }\n      >\n        {dispMsg ? \"Close Message\" : \"Display Message\"}\n      </button>\n    </div>\n  );\n}\n*/\n\n/*\n// Test bug with using state within setState\nimport TestState from \"./components/testSetState/TestState\";\nimport TestHooks from \"./components/testSetState/TestHooks\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Test state in Class Component</h2>\n      <TestState />\n      <h2>Test Hooks</h2>\n      <TestHooks />\n    </div>\n  );\n}\n*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst target = document.getElementById(\"tsd-rt-root\");\nif (target) ReactDOM.render(<App />, target);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}